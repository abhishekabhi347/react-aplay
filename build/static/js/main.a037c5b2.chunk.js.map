{"version":3,"sources":["components/home.js","components/playzone.js","components/navbar.js","components/footer.js","components/todos.js","components/cmptasks.js","components/newtasks.js","components/notes.js","serviceWorker.js","index.js"],"names":["Home","className","alt","style","float","src","PlayZone","NavBar","to","Footer","ToDos","CompletedTasks","NewTasks","Notes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","App","exact","path","component","rootElement","document","getElementById","hasChildNodes","ReactDOM","hydrate","render","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a037c5b2.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport \"../styles/home.scss\";\r\nconst Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <header>\r\n        <h2>About APlay</h2>\r\n      </header>\r\n\r\n      <section>\r\n        <article>\r\n          <p>APlay is all about funny little idea's of a software developer.</p>\r\n\r\n          <div className=\"container-wrapper\">\r\n            <div className=\"card gamingcard\">\r\n              <div className=\"container\">\r\n                <h3>\r\n                  <b>Gaming</b>\r\n                </h3>\r\n                <p>\r\n                  <img\r\n                    alt=\"gaming-console\"\r\n                    style={{ float: \"none\" }}\r\n                    src=\"https://img.icons8.com/plasticine/100/000000/nintendo-gamecube-controller.png\"\r\n                  />\r\n                  Gaming is the running of specialized applications known as\r\n                  electronic games or video games on game consoles like X-box\r\n                  and Playstation or on personal computers (in which case the\r\n                  activity is known as online gaming). The term \"gaming\"\r\n                  originated as a synonym for \"gambling\" although most\r\n                  electronic games today do not involve gambling in the\r\n                  traditional sense.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </article>\r\n      </section>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst PlayZone = () => {\r\n  return <div>PlayZone</div>;\r\n};\r\n\r\nexport default PlayZone;\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../styles/navbar.scss\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <Fragment>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\" className=\"apptitle\">\r\n              <b>APlay</b>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/home\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/playzone\">Play zone</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/notes\">Notes</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"\">..Soon</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"../styles/footer.scss\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>@APlay</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst ToDos = () => {\r\n  return <div>ToDos</div>;\r\n};\r\n\r\nexport default ToDos;\r\n","import React from \"react\";\r\n\r\nconst CompletedTasks = () => {\r\n  return <div>CompletedTasks</div>;\r\n};\r\n\r\nexport default CompletedTasks;\r\n","import React from \"react\";\r\n\r\nconst NewTasks = () => {\r\n  return <div>NewTasks</div>;\r\n};\r\n\r\nexport default NewTasks;\r\n","import React, { Fragment } from \"react\";\r\nimport ToDos from \"./todos\";\r\nimport CompletedTasks from \"./cmptasks\";\r\nimport NewTasks from \"./newtasks\";\r\nimport \"../styles/notes.scss\";\r\n\r\nconst Notes = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container-wrapper\">\r\n        <h2>Notes</h2>\r\n        <div className=\"content-wrapper\">\r\n          <div className=\"container-tasks\">\r\n            <ToDos></ToDos>\r\n          </div>\r\n          <div className=\"container-DoneTasks\">\r\n            <CompletedTasks></CompletedTasks>\r\n          </div>\r\n          <div className=\"container-NewTask\">\r\n            <NewTasks></NewTasks>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.scss\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./components/home\";\r\nimport PlayZone from \"./components/playzone\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Footer from \"./components/footer\";\r\nimport Notes from \"./components/notes\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Fragment>\r\n        <NavBar></NavBar>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/home\" component={Home} />\r\n          <Route path=\"/playzone\" component={PlayZone} />\r\n          <Route path=\"/notes\" component={Notes} />\r\n        </Switch>\r\n        <Footer></Footer>\r\n      </Fragment>\r\n    </Router>\r\n  );\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nif (rootElement.hasChildNodes()) {\r\n  ReactDOM.hydrate(<App />, rootElement);\r\n} else {\r\n  ReactDOM.render(<App />, rootElement);\r\n}\r\nserviceWorker.register();\r\n"],"sourceRoot":""}